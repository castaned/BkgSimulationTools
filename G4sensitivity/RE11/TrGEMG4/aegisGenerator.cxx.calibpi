#include <TVirtualMC.h>
#include <TVirtualMCStack.h>
#include <TPDGCode.h>
#include <TDatabasePDG.h>
#include <TParticlePDG.h>
#include <TVector3.h>
#include <TMath.h>
#include "TLorentzVector.h"
#include "TGenPhaseSpace.h"

#include "aegisGenerator.h"
 #include <fstream>


#define MPC   0.139566
#define MP0   0.134976 

#define NFS 14

Int_t NumPar2[NFS] = {
  2,                                 // p0 p0   
  4,                                 // p0 p0 p0 p0 
  3,                                 // p+ p- p0
  4,                                 // p+ p- p0 p0
  5,                                 // p+ p- p0 p0 p0
  6,                                 // p+ p- p0 p0 p0 p0      
  4,                                 // p+ p- p+ p-
  5,                                 // p0 p+ p- p+ p-
  6,                                 // p0 p0 p+ p- p+ p-
  7,                                 // p0 p0 p0 p+ p- p+ p-
  6,                                 // p+ p- p+ p- p+ p-
  7,                                 // p+ p- p+ p- p+ p- p0
  2,                                 // p+ p-
  3                                  // p0 p0 p0      
};                              

Double_t ParMas2[NFS][7] = { 
  { MP0, MP0,   0,   0,   0,   0,   0},   // p0 p0
  { MP0, MP0, MP0, MP0,   0,   0,   0},   // p0 p0 p0 p0
  { MP0, MPC, MPC,   0,   0,   0,   0},   // p0 p+ p-
  { MP0, MP0, MPC, MPC,   0,   0,   0},   // p0 p0 p+ p-
  { MP0, MP0, MPC, MPC, MP0,   0,   0},   // p0 p0 p0 p+ p-
  { MP0, MP0, MPC, MPC, MP0, MP0,   0},   // p0 p0 p0 p0  p+ p-
  { MPC, MPC, MPC, MPC,   0,   0,   0},   // p+ p- p+ p-
  { MP0, MPC, MPC, MPC, MPC,   0,   0},   // p0 p+ p- p+ p-
  { MP0, MP0, MPC, MPC, MPC, MPC,   0},   // p0 p0 p+ p- p+ p-
  { MP0, MP0, MPC, MPC, MPC, MPC, MP0},   // p0 p0 p0 p+ p- p+ p-
  { MPC, MPC, MPC, MPC, MPC, MPC,   0},   // p+ p- p+ p- p+ p-
  { MPC, MPC, MPC, MPC, MPC, MPC, MP0},   // p+ p- p+ p- p+ p- p0
  { MPC, MPC,   0,   0,   0,   0,   0},   // p+ p-
  { MP0, MP0, MP0,   0,   0,   0,   0}    // p0 p0 p0    
};

Int_t ParNum2[NFS][7] = { 
  
 
  {   111,   111,   0,   0,   0,   0,   0},   // p0 p0        
  {   111,   111,   111,   111,   0,   0,   0},   // p0 p0 p0 p0                
  {   111,   211,   -211,   0,   0,   0,   0},   // p0 p+ p-
  {   111,   111,   211,   -211,   0,   0,   0},   // p0 p0 p+ p-
  {   111,   111,   211,   -211,   111,   0,   0},   // p0 p0 p0 p+ p-   
  {   111,   111,   211,   -211,   111,   111,   0},   // p0 p0 p0 p0 p+ p-            
  {   211,   -211,   211,   -211,   0,   0,   0},   // p+ p- p+ p-
  {   111,   211,   -211,   211,   -211,   0,   0},   // p0 p+ p- p+ p-
  {   111,   111,   211,   -211,   211,   -211,   0},   // p0 p0 p+ p- p+ p-
  {   111,   111,   211,   -211,   211,   -211,   111},   // p0 p0 p0 p+ p- p+ p-
  {   211,   -211,   211,   -211,   211,   -211,   0},   // p+ p- p+ p- p+ p-
  {   211,   -211,   211,   -211,   211,   -211,   111},   // p+ p- p+ p- p+ p- p0
  {   211,   -211,   0,   0,   0,   0,   0},   // p+ p-
  {   111,   111,   111,   0,   0,   0,   0}    // p0 p0 p0 
};

 
Double_t MaxWeigth2[NFS] = {
  1.000000, // p0 p0  
  0.118145, // p0 p0 p0 p0  
  0.411809, // p0 p+ p-  
  0.118144, // p0 p0 p+ p-
  0.027187, // p0 p0 p0 p+ p-
  0.005407, // p0 p0 p0 p0 p+ p-
  0.118187, // p+ p- p+ p-  
  0.027182, // p0 p+ p- p+ p-  
  0.005405, // p0 p0 p+ p- p+ p-
  0.000963, // p0 p0 p0 p+ p- p+ p- 
  0.005405, // p+ p- p+ p- p+ p-  
  0.000967, // p+ p- p+ p- p+ p- p0  
  1.000000, // p+ p-  
  0.411814  // p0 p0 p0 
};

Double_t BraRat2[NFS] = {  
  .00028,   // p0 p0  
  .03000,   // p0 p0 p0 p0               
  .06900,   // p0 p+ p-  
  .09300,   // p0 p0 p+ p-
  .23300,   // p0 p0 p0 p+ p-
  .02800,   // p0 p0 p0 p0 p+ p- 
  .06900,   // p+ p- p+ p-  
  .19600,   // p0 p+ p- p+ p-  
  .16600,   // p0 p0 p+ p- p+ p-  
  .04200,   // p0 p0 p0 p+ p- p+ p-  
  .02100,   // p+ p- p+ p- p+ p-  
  .01900,   // p+ p- p+ p- p+ p- p0  
  .00320,   // p+ p-
  .00760    // p0 p0 p0   
}; 

Double_t BraRat2Cum[NFS];


ClassImp(aegisGenerator);

//-----------------------------------------------------------------------------
aegisGenerator::aegisGenerator(TVirtualMCStack* stack,aegisApparatus* detConstruction)
 :TObject(),
 fStack(stack),
 fDetConstruction(detConstruction),
 fPdg(kPiPlus),           
// fPdg(kPiMinus),           
// fPdg(kProtonBar),           
 fNofPart(1),
 fKinEnergy(5.3e-3),
 fXOrigin(0.), 
 fYOrigin(0.),
 fZOrigin(0.),
 fPx(0.),
 fPy(0.),
 fPz(0.)
{
  //
  // Default constructor
  
  Double_t nor=0;
  for (Int_t k=0;k<NFS;k++) nor+=BraRat2[k];
  for (Int_t k=0;k<NFS;k++) BraRat2[k] /= nor;

  BraRat2Cum[0] = BraRat2[0];
  for (Int_t k=1;k<NFS;k++) BraRat2Cum[k] = BraRat2[k] + BraRat2Cum[k-1];
//
// SetNofPart(1.);
}
//-----------------------------------------------------------------------------
void aegisGenerator::Generate()
{

// Reading initialization parameters from aegis.ini file
// It looks for Primary Generator flags, that is (09/02/2012):
// genMode 1    // Generation flag (0 = AD antiproton beam, 1 = pbar cloud, 2 = hbar beam [to be added])
// maxwMode 0   // 0 = gaussian distribution for the pbar cloud, 1 = maxwellian distribution
  Int_t genMode=0; // Generation flag (0 = AD antiproton beam, 1 = pbar cloud, 2 = hbar beam [to be added])
  Int_t maxwMode=0;  //==0 maxwellian + isotropic angles // ==1 modulus 3 gaussians
  Int_t genNEve=1;  //event multiplicity
  Int_t genverbose=0;  // 0-no gene info, 1-vtx and momentum printed
  
	FILE *fINI;
	int value;
	char filename[50],sdummy[100],sflag[30];
	sprintf(filename,"aegis.ini");

/* It opens the file with the initialization settings */
	fINI=fopen(filename,"r");
	if(fINI==NULL) {
	 printf("File %s doesn't exist - please get it from the svn server\n",filename);
	 return;
	}

        fgets(sdummy,200,fINI); // Title line
        
    	while(fgets(sdummy,200,fINI)!=NULL) {
         if(strncmp(sdummy,"#Primary",7)==0) {

	   fgets(sdummy,200,fINI);
    	   sscanf(sdummy,"%s %d",sflag,&value);         
           if(strcmp(sflag,"genMode")==0) genMode = value;

	   fgets(sdummy,200,fINI);
    	   sscanf(sdummy,"%s %d",sflag,&value);         
           if(strcmp(sflag,"maxwMode")==0) maxwMode = (bool)value;

	   fgets(sdummy,200,fINI);
	   sscanf(sdummy,"%s %d",sflag,&value);
	     if(strcmp(sflag,"genNEve")==0) genNEve = value;

	   fgets(sdummy,200,fINI);
	   sscanf(sdummy,"%s %d",sflag,&value);
	     if(strcmp(sflag,"genverbose")==0) genverbose = value;
	 }
    	}

	fclose(fINI);
 
fMode=genMode;
fverbose=genverbose;
 //
 // if genNEve=1 Generate one antiproton, otherwise genNEve antiprotons
 //
 Double_t origin[3]={-999.,-999.,-999.}; // Primary vertex
 Double_t p[3]={-999.,-999.,-999.}; // Primary momentum
 Int_t ntr;
 Int_t toBeDone = 1;
 Double_t pol[3]= {0,0,0};

 fPdg =  kPiPlus;  //
// fPdg = kPiMinus;  // 
// fPdg = kProtonBar;  //atiproton 
 TParticlePDG* particlePDG = TDatabasePDG::Instance()->GetParticle(fPdg);

 // time of flight
 Double_t tof = 0.;

 // Energy (in GeV)
 Double_t kinEnergy; // Kinetic energy
 Double_t mass = particlePDG->Mass(); // Mass
 Double_t e = -999.; // Total energy
 
for (Int_t in=0; in<genNEve; in++) {

 if(genMode==0) {
  // Adding realistic AEgIS beam spot and divergence  
  // Beam size and divergence from Pavel+Daniel formulas
  // Beam focus has been assumed to be at -117.2 cm from our origin

  kinEnergy = 5.3e-3; // AD beam with 5.3 MeV kinetic energy
  e = mass + kinEnergy;

  Double_t zgen,zFocal,distFocal,beta,betaFocal,emittance,xySig,pSig,angle,pz,ptot;

  zgen = -173;
  ptot = sqrt(e*e - mass*mass);
  pz=ptot;
 
  zFocal = -117.0;
  distFocal = (zgen-zFocal)/100.; // must be in m
  betaFocal = 0.5; // in m
  emittance = 1.; // in units of PI mm mrad

  beta = betaFocal + pow(distFocal,2.)/betaFocal;
  xySig = sqrt(beta*emittance);
  angle = (emittance/xySig);

  xySig /= 10.; // /10. to have it in cm
  angle /= 1000.; // /1000. to have it rad
  pSig = sin(angle)*ptot;

  // Origin

  fXOrigin = gRandom->Gaus(0.,xySig); 
  fYOrigin = gRandom->Gaus(0.,xySig); 
  fZOrigin = zgen; 

  origin[0] = fXOrigin;
  origin[1] = fYOrigin;
  origin[2] = fZOrigin;

  // Momentum
  fPx = gRandom->Gaus(0.,pSig);
  fPy = gRandom->Gaus(0.,pSig);
  fPz = sqrt(ptot*ptot - fPx*fPx - fPy*fPy);

  p[0] = fPx;
  p[1] = fPy;
  p[2] = fPz;
 }

 if(genMode==1) {
  // Adding pbar/hbar cloud generation
  // antiprotons are generated from a maxwellian or gaussian distribution 
  // from a cylinder shape 


  Double_t a;
  Double_t b;
  Double_t T=15; // in Kelvin
  Double_t maxv=900; // m/s
  double m= 1.672e-27; // Masso of the antiproton in kg
  double k= 1.380e-23; // Boltzmann constant
  Double_t  theta=-999.;
  Double_t  phi=-999.;
  Double_t v=0.,v1,v2,v3,mv;  

  if(maxwMode==0)
  {
  while(1)
  {
     a=gRandom->Uniform(0.,maxv); // m/s
     b=gRandom->Uniform(0.,0.01);
     if(b<Maxwell(a,T)) break;
  }
   v=a;
   phi = gRandom->Uniform(0.,360.) * 3.141592/180.;
   theta =  acos(1.-2.*gRandom->Uniform(0.,1.)) ;
   }
  else if(maxwMode==1)
  {
   v1=gRandom->Gaus(0.,sqrt(k*T/m));
   v2=gRandom->Gaus(0.,sqrt(k*T/m));
   v3=gRandom->Gaus(0.,sqrt(k*T/m));
//    v3=gRandom->Gaus(0.,sqrt(k*T/m))+600.;
   mv=sqrt(v1*v1+v2*v2+v3*v3);
   v=mv;
   theta=acos(v3/mv);
   phi=atan2(v2,v1);
  }

  // Origin - extracting randomly from a cylinder
  Double_t zgen,xySig,zSig,ptot;
  zgen = 66.; // z offset to be in the center of the SciFi detector (to be checked)
  xySig = 0.01; zSig = 0.1;  
  fXOrigin = gRandom->Gaus(0.,xySig); 
  fYOrigin = gRandom->Gaus(0.,xySig); 
  fZOrigin = zgen+gRandom->Gaus(0.,zSig); 

  origin[0] = fXOrigin;
  origin[1] = fYOrigin;
  origin[2] = fZOrigin;

  // Momentum
  Double_t c,beta,gamma;
  c = 299792458; // Speed of light in m/s
  beta = v/c;
  gamma = 1/sqrt(1-beta*beta);
  ptot = gamma*mass*beta; // relativistic formula, ptot is expressed in GeV
  e = sqrt(ptot*ptot + mass*mass);  
  //printf("ptot %f gamma %f mass %f \n",ptot,gamma,mass);

  //printf("theta %f phi %f sin(theta) %f\n",theta,phi,sin(theta));
  fPx = ptot*sin(theta)*cos(phi);
  fPy = ptot*sin(theta)*sin(phi);
  fPz = ptot*cos(theta);

  p[0] = fPx;
  p[1] = fPy;
  p[2] = fPz;

 }

 if(genMode==3 || genMode==4 ) {

  // pbar/hbar  from Athena generator on gDet

    Double_t  gDetZ=fDetConstruction->GetgDetZini(); 
    Double_t  gDetX=fDetConstruction->GetgDetX()-1.;
    Double_t  gDetY=fDetConstruction->GetgDetY()-1.;

  // Origin

  //vertex on gDet
  fXOrigin = gRandom->Uniform(0.,1.)*gDetX-gDetX/2.;
  fYOrigin = gRandom->Uniform(0.,1.)*gDetY-gDetY/2.;
  fZOrigin = gDetZ;

  origin[0] = fXOrigin;
  origin[1] = fYOrigin;
  origin[2] = fZOrigin;

  if(genMode==3) {

  origin[2] = fZOrigin-1.;

//   // Momentum
//   Double_t v=600.; // m/s
//   Double_t c,beta,gamma,ptot;
//   c = 299792458; // Speed of light in m/s
//   beta = v/c;
//   gamma = 1/sqrt(1-beta*beta);
//   ptot = gamma*mass*beta; // relativistic formula, ptot is expressed in GeV
//   e = sqrt(ptot*ptot + mass*mass);  
// 
//   fPx = 0;
//   fPy = 0;
//   fPz = ptot;
// 
//   p[0] = fPx;
//   p[1] = fPy;
//   p[2] = fPz;

  // Momentum

/* It opens the file with the initialization settings */
	ifstream in;
 	in.open("output/PiCalibenergy.out");
//	fINI=fopen("output/PiCalibenergy.out","r");
	if(in==NULL) {
	 printf("File PiCalibenergy.out doesn't exist - please get it from the svn server\n");
	 return;
	}

    Double_t ptot;
    Double_t xx[100],yy[100],maxx,maxy,xxx,yyy;
    Double_t  theta=-999.;
    Double_t  phi=-999.;
    Int_t  ifunc=-1;
    Double_t xtemp,ytemp;

		in >> maxx >> maxy ;
	for(Int_t i=0; i<100;i++){
		in >> xtemp >> ytemp ;
	xx[i]=xtemp;        
	yy[i]=ytemp;        
	}
        

while (1){
  xxx=gRandom->Uniform(0.,1.)*maxx;
  yyy=gRandom->Uniform(0.,1.)*maxy;

for(Int_t i=0; i<100;i++){
if(xxx<xx[i]) {ifunc=i;break;}
}
//	 printf("cri0 %d %f %f \n", ifunc, xx[ifunc]-xxx, xxx-xx[ifunc-1]  );
if( (xx[ifunc]-xxx) >  (xxx-xx[ifunc-1])) ifunc=ifunc-1;

//	 printf("cri %f %f %f %f %f %f \n", yyy, xxx,xx[ifunc-1],xx[ifunc],xx[ifunc+1],yy[ifunc] );

 if(yyy<yy[ifunc]) break;

}

//	 printf("cri %f %f  \n", yyy, yy[ifunc] );

   ptot = xxx; 

    e = sqrt(ptot*ptot + mass*mass);  
   
   phi = gRandom->Uniform(0.,360.) * 3.141592/180.;
//   theta =  acos(1.-2.*gRandom->Uniform(0.,1.)) ;
   theta =  gRandom->Uniform(0.,84.) * 3.141592/180.; 

 
//  fPx = 0;
//  fPy = 0;
//  fPz = ptot;
 
  fPx = ptot*sin(theta)*cos(phi);
  fPy = ptot*sin(theta)*sin(phi);
  fPz = ptot*cos(theta);

  p[0] = fPx;
  p[1] = fPy;
  p[2] = fPz;

  
  }

  if(genMode==4) {
  // Momentum
    Float_t fs = gRandom->Uniform(0.,1.);
    Int_t fFs = 0;
    while (fs>BraRat2Cum[fFs]) fFs++;

    TLorentzVector P(0,0,0, 2.*938.279E-3);
    TGenPhaseSpace ps;     
    ps.SetDecay(P,NumPar2[fFs],ParMas2[fFs]);
    while ( ps.Generate()/MaxWeigth2[fFs] < gRandom->Uniform(0.,1.) );
    
    fNsecgen=NumPar2[fFs];
    for (Int_t n=0; n<NumPar2[fFs]; n++) {
     TVector3 *vt = new TVector3(ps.GetDecay(n)->Vect());
     vt->GetXYZ(p);
     fPdg=ParNum2[fFs][n];

     fPxs[n] =  p[0];
     fPys[n] =  p[1];
     fPzs[n] =  p[2];

 fStack->PushTrack(toBeDone,-1,fPdg,p[0],p[1],p[2],e,origin[0],origin[1],origin[2],tof,pol[0],pol[1],pol[2],kPPrimary,ntr,1.,0);
    }

  }


 }
 

 // Add particle to stack
if(genMode<4)
 fStack->PushTrack(toBeDone,-1,fPdg,p[0],p[1],p[2],e,origin[0],origin[1],origin[2],tof,pol[0],pol[1],pol[2],kPPrimary,ntr,1.,0);



} 
}
//-----------------------------------------------------------------------------
void aegisGenerator::Init()
{
 //
 if(fverbose==1){
// Initialitation, some checks
 //
 printf("**************************** aegisGenerator initialized ******************************************\n");
 printf("*************************** antiprotons generated at : *******************************************\n");
 printf("X = %f cm\n",fXOrigin);
 printf("Y = %f cm\n",fYOrigin);
 printf("Z = %f cm\n",fZOrigin);
 printf("******************************* antiprotons momentum : *******************************************\n");
if(fMode<4){
 printf("Px = %f GeV/c\n",fPx);
 printf("Py = %f GeV/c\n",fPy);
 printf("Pz = %f GeV/c\n",fPz);
 }
if(fMode==4)
{
 for(Int_t n=0; n<fNsecgen; n++) {
  printf("Px = %f GeV/c for %d particle \n",fPxs[n],n);
  printf("Py = %f GeV/c for %d particle \n",fPys[n],n);
  printf("Pz = %f GeV/c for %d particle \n",fPzs[n],n);
 }
}
 printf("**************************************************************************************************\n");
}
 return;

}
Double_t aegisGenerator::Maxwell(Double_t v, Double_t T)
{

  Double32_t m= 1.672e-27;
  Double32_t k= 1.380e-23;
  Double32_t maxww;
  
  maxww=(4/sqrt(3.141592))*pow(m/(2*k*T),1.5)*v*v*exp(-m*v*v/(2*k*T));
  return maxww;
}


